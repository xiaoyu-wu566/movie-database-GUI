// automatically generated by the FlatBuffers compiler, do not modify

package csce315.group29.models;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Actor extends Table {
  public static Actor getRootAsActor(ByteBuffer _bb) { return getRootAsActor(_bb, new Actor()); }
  public static Actor getRootAsActor(ByteBuffer _bb, Actor obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Actor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String nconst() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nconstAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nconstInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public ActorConnection connections(int j) { return connections(new ActorConnection(), j); }
  public ActorConnection connections(ActorConnection obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int connectionsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createActor(FlatBufferBuilder builder,
      int nconstOffset,
      int connectionsOffset) {
    builder.startObject(2);
    Actor.addConnections(builder, connectionsOffset);
    Actor.addNconst(builder, nconstOffset);
    return Actor.endActor(builder);
  }

  public static void startActor(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addNconst(FlatBufferBuilder builder, int nconstOffset) { builder.addOffset(0, nconstOffset, 0); }
  public static void addConnections(FlatBufferBuilder builder, int connectionsOffset) { builder.addOffset(1, connectionsOffset, 0); }
  public static int createConnectionsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startConnectionsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endActor(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

